# -*- coding: utf-8 -*-
"""
  run_doe.py generated by WhatsOpt 1.6.1
"""
# DO NOT EDIT unless you know what you are doing
# analysis_id: 77

import sys
import numpy as np
import matplotlib.pyplot as plt
from packaging import version

from openmdao import __version__ as OPENMDAO_VERSION
from openmdao.api import Problem, SqliteRecorder, CaseReader
from openmdao_extensions.smt_doe_driver import SmtDOEDriver
from lanceur_prop_solide import LanceurPropSolide 

from optparse import OptionParser

parser = OptionParser()
parser.add_option("-b", "--batch",
                  action="store_true", dest="batch", default=False,
                  help="do not plot anything")
parser.add_option("-n", "--ncases", type="int",
                  dest="n_cases", default=50,
                  help="number of samples")
parser.add_option("-p", "--parallel", 
                  action="store_true", default=False,
                  help="run doe in parallel")
(options, args) = parser.parse_args()

pb = Problem(LanceurPropSolide())
pb.driver = SmtDOEDriver(sampling_method_name='LHS', n_cases=options.n_cases, sampling_method_options={'criterion': 'ese'})
pb.driver.options['run_parallel'] = options.parallel

case_recorder_filename = 'lanceur_prop_solide_doe.sqlite'        
recorder = SqliteRecorder(case_recorder_filename)
pb.driver.add_recorder(recorder)
if version.parse(OPENMDAO_VERSION) > version.parse("2.8.0"):
    pb.model.nonlinear_solver.options['err_on_non_converge'] = True
else:
    pb.model.nonlinear_solver.options['err_on_maxiter'] = True


pb.model.add_design_var('Ae', lower=-sys.float_info.max, upper=sys.float_info.max)
pb.model.add_design_var('beta', lower=-sys.float_info.max, upper=sys.float_info.max)
pb.model.add_design_var('De', lower=-sys.float_info.max, upper=sys.float_info.max)
pb.model.add_design_var('Ds', lower=-sys.float_info.max, upper=sys.float_info.max)
pb.model.add_design_var('Dt', lower=-sys.float_info.max, upper=sys.float_info.max)
pb.model.add_design_var('L_vehicle', lower=-sys.float_info.max, upper=sys.float_info.max)
pb.model.add_design_var('M_case', lower=-sys.float_info.max, upper=sys.float_info.max)
pb.model.add_design_var('M_igniter', lower=-sys.float_info.max, upper=sys.float_info.max)
pb.model.add_design_var('M_nozzle', lower=-sys.float_info.max, upper=sys.float_info.max)
pb.model.add_design_var('R', lower=-sys.float_info.max, upper=sys.float_info.max)
pb.model.add_design_var('Ru', lower=-sys.float_info.max, upper=sys.float_info.max)
pb.model.add_design_var('SF', lower=-sys.float_info.max, upper=sys.float_info.max)
pb.model.add_design_var('theta_n', lower=-sys.float_info.max, upper=sys.float_info.max)


pb.model.add_objective('At')
pb.model.add_objective('C_F')
pb.model.add_objective('C_star')
pb.model.add_objective('epsilon')
pb.model.add_objective('F_T')
pb.model.add_objective('gamma_maj')
pb.model.add_objective('Isp')
pb.model.add_objective('L_case')
pb.model.add_objective('L_conv')
pb.model.add_objective('L_div')
pb.model.add_objective('L_fairing')
pb.model.add_objective('L_interstage')
pb.model.add_objective('L_SRM')
pb.model.add_objective('Mp')
pb.model.add_objective('M_avionics')
pb.model.add_objective('M_EPS')
pb.model.add_objective('M_fairing')
pb.model.add_objective('M_interstage')
pb.model.add_objective('M_pad')
pb.model.add_objective('M_PLA')
pb.model.add_objective('M_SRM')
pb.model.add_objective('prop_m')
pb.model.add_objective('Ve')

pb.setup()  
pb.run_driver()        


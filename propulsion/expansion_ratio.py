# -*- coding: utf-8 -*-
"""
  expansion_ratio.py generated by WhatsOpt 1.6.1
"""
import numpy as np
from propulsion.expansion_ratio_base import ExpansionRatioBase

class ExpansionRatio(ExpansionRatioBase):
    """ An OpenMDAO component to encapsulate ExpansionRatio discipline """
		
    def compute(self, inputs, outputs):
        """ ExpansionRatio computation """
        gamma = inputs['gamma']
        gamma_maj = inputs['gamma_maj']
        Pc = inputs['Pc']
        Pe = inputs['Pe']

        epsilon = gamma_maj/(np.sqrt(((2*gamma)/(gamma-1))*((Pe/Pc)**(2/gamma))*(1-((Pe/Pc)**((gamma-1)/gamma)))))
        
        outputs['epsilon'] = epsilon

        return outputs 

# Reminder: inputs of compute()
#   
#       inputs['gamma'] -> shape: (1,), type: Float    
#       inputs['gamma_maj'] -> shape: (1,), type: Float    
#       inputs['Pc'] -> shape: 1, type: Float    
#       inputs['Pe'] -> shape: 1, type: Float      
	
# To declare partial derivatives computation ...
# 
#    def setup(self):
#        super(ExpansionRatio, self).setup()
#        self.declare_partials('*', '*')  
#			
#    def compute_partials(self, inputs, partials):
#        """ Jacobian for ExpansionRatio """
#   
#       	partials['epsilon', 'gamma'] = np.zeros((1, 1))
#       	partials['epsilon', 'gamma_maj'] = np.zeros((1, 1))
#       	partials['epsilon', 'Pc'] = np.zeros((1, 1))
#       	partials['epsilon', 'Pe'] = np.zeros((1, 1))        

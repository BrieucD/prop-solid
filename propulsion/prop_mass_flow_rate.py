# -*- coding: utf-8 -*-
"""
  prop_mass_flow_rate.py generated by WhatsOpt 1.6.1
"""
import numpy as np
from propulsion.prop_mass_flow_rate_base import PropMassFlowRateBase

class PropMassFlowRate(PropMassFlowRateBase):
    """ An OpenMDAO component to encapsulate PropMassFlowRate discipline """
		
    def compute(self, inputs, outputs):
        """ PropMassFlowRate computation """
        At = inputs['At']
        gamma_maj = inputs['gamma_maj']
        Pc = inputs['Pc']
        R = inputs['R']
        Tc = inputs['Tc']
        Ra = 8314
        M = 29
        R = Ra/M

        prop_m=(Pc*At*gamma_maj)/(np.sqrt(R*Tc))
        
        outputs['prop_m'] = prop_m
        return outputs   

# Reminder: inputs of compute()
#   
#       inputs['At'] -> shape: (1,), type: Float    
#       inputs['gamma_maj'] -> shape: (1,), type: Float    
#       inputs['Pc'] -> shape: (1,), type: Float    
#       inputs['R'] -> shape: (1,), type: Float    
#       inputs['Tc'] -> shape: (1,), type: Float      
	
# To declare partial derivatives computation ...
# 
#    def setup(self):
#        super(PropMassFlowRate, self).setup()
#        self.declare_partials('*', '*')  
#			
#    def compute_partials(self, inputs, partials):
#        """ Jacobian for PropMassFlowRate """
#   
#       	partials['prop_m', 'At'] = np.zeros((1, 1))
#       	partials['prop_m', 'gamma_maj'] = np.zeros((1, 1))
#       	partials['prop_m', 'Pc'] = np.zeros((1, 1))
#       	partials['prop_m', 'R'] = np.zeros((1, 1))
#       	partials['prop_m', 'Tc'] = np.zeros((1, 1))        

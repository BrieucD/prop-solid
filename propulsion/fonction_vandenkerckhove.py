# -*- coding: utf-8 -*-
"""
  fonction_vandenkerckhove.py generated by WhatsOpt 1.6.1
"""
import numpy as np
from propulsion.fonction_vandenkerckhove_base import FonctionVandenkerckhoveBase

class FonctionVandenkerckhove(FonctionVandenkerckhoveBase):
    """ An OpenMDAO component to encapsulate FonctionVandenkerckhove discipline """
		
    def compute(self, inputs, outputs):
        """ FonctionVandenkerckhove computation """
        gamma = inputs['gamma']
        
        gamma_maj = np.sqrt(gamma)*((2/(gamma+1))**((gamma+1)/(2*(gamma-1))))
    
        outputs['gamma_maj'] = gamma_maj
        
        return outputs

# Reminder: inputs of compute()
#   
#       inputs['gamma'] -> shape: (1,), type: Float      
	
# To declare partial derivatives computation ...
# 
#    def setup(self):
#        super(FonctionVandenkerckhove, self).setup()
#        self.declare_partials('*', '*')  
#			
#    def compute_partials(self, inputs, partials):
#        """ Jacobian for FonctionVandenkerckhove """
#   
#       	partials['gamma_maj', 'gamma'] = np.zeros((1, 1))        

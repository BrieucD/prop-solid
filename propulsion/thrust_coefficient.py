# -*- coding: utf-8 -*-
"""
  thrust_coefficient.py generated by WhatsOpt 1.6.1
"""
import numpy as np
from propulsion.thrust_coefficient_base import ThrustCoefficientBase

class ThrustCoefficient(ThrustCoefficientBase):
    """ An OpenMDAO component to encapsulate ThrustCoefficient discipline """
		
    def compute(self, inputs, outputs):
        """ ThrustCoefficient computation """
        
        C_F=gamma_maj()
    
        outputs['C_F'] = np.ones((1,))   

# Reminder: inputs of compute()
#   
#       inputs['gamma'] -> shape: (1,), type: Float    
#       inputs['gamma_maj'] -> shape: (1,), type: Float    
#       inputs['Pc'] -> shape: (1,), type: Float    
#       inputs['Pe'] -> shape: (1,), type: Float      
	
# To declare partial derivatives computation ...
# 
#    def setup(self):
#        super(ThrustCoefficient, self).setup()
#        self.declare_partials('*', '*')  
#			
#    def compute_partials(self, inputs, partials):
#        """ Jacobian for ThrustCoefficient """
#   
#       	partials['C_F', 'gamma'] = np.zeros((1, 1))
#       	partials['C_F', 'gamma_maj'] = np.zeros((1, 1))
#       	partials['C_F', 'Pc'] = np.zeros((1, 1))
#       	partials['C_F', 'Pe'] = np.zeros((1, 1))        

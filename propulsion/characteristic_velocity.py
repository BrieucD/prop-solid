# -*- coding: utf-8 -*-
"""
  characteristic_velocity.py generated by WhatsOpt 1.7.1
"""
import numpy as np
from propulsion.characteristic_velocity_base import CharacteristicVelocityBase

class CharacteristicVelocity(CharacteristicVelocityBase):
    """ An OpenMDAO component to encapsulate CharacteristicVelocity discipline """
		
    def compute(self, inputs, outputs):
        """ CharacteristicVelocity computation """
        if self._impl:
            # Docking mechanism: use implementation if referenced in .whatsopt_dock.yml file
            self._impl.compute(inputs, outputs)
        else:
            gamma_maj = inputs['gamma_maj']
            R = inputs['R']
            Tc = inputs['Tc']
            Ra = 8314
            M = 29
            R = Ra/M

            C_star = (1/gamma_maj)*np.sqrt(R*Tc)

            outputs['C_star'] = C_star
        return outputs 

# Reminder: inputs of compute()
#   
#       inputs['gamma_maj'] -> shape: (1,), type: Float    
#       inputs['R'] -> shape: (1,), type: Float    
#       inputs['Tc'] -> shape: (1,), type: Float      
	
# To declare partial derivatives computation ...
# 
#    def setup(self):
#        super(CharacteristicVelocity, self).setup()
#        self.declare_partials('*', '*')  
#			
#    def compute_partials(self, inputs, partials):
#        """ Jacobian for CharacteristicVelocity """
#   
#       	partials['C_star', 'gamma_maj'] = np.zeros((1, 1))
#       	partials['C_star', 'R'] = np.zeros((1, 1))
#       	partials['C_star', 'Tc'] = np.zeros((1, 1))        

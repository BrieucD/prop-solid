# -*- coding: utf-8 -*-
"""
  propulsion_base.py generated by WhatsOpt 1.6.1
"""
# DO NOT EDIT unless you know what you are doing
# analysis_id: 78

import numpy as np
from packaging import version

from openmdao.api import Problem, Group, ParallelGroup, IndepVarComp
from openmdao.api import NonlinearBlockGS
from openmdao.api import ScipyKrylov
from openmdao import __version__ as OPENMDAO_VERSION

from propulsion.fonction_vandenkerckhove import FonctionVandenkerckhove
from propulsion.expansion_ratio import ExpansionRatio
from propulsion.throat_area import ThroatArea
from propulsion.prop_mass_flow_rate import PropMassFlowRate
from propulsion.characteristic_velocity import CharacteristicVelocity
from propulsion.thrust_coefficient import ThrustCoefficient
from propulsion.exhaust_velocity import ExhaustVelocity
from propulsion.thrust_force import ThrustForce
from propulsion.specific_impulse import SpecificImpulse











class PropulsionBase(Group):
    """ An OpenMDAO base component to encapsulate Propulsion MDA """
    def __init__(self, thrift_client=None, **kwargs):
        super(PropulsionBase, self). __init__(**kwargs)

        self.nonlinear_solver = NonlinearBlockGS()       
        self.nonlinear_solver.options['atol'] = 1.0e-10
        self.nonlinear_solver.options['rtol'] = 1.0e-10
        if version.parse(OPENMDAO_VERSION) > version.parse("2.8.0"):
            self.nonlinear_solver.options['err_on_non_converge'] = True
            if version.parse(OPENMDAO_VERSION) > version.parse("2.9.1"):
                self.nonlinear_solver.options['reraise_child_analysiserror'] = False 
        else:
            self.nonlinear_solver.options['err_on_maxiter'] = True
        self.nonlinear_solver.options['iprint'] = 1

        self.linear_solver = ScipyKrylov()       
        self.linear_solver.options['atol'] = 1.0e-10
        self.linear_solver.options['rtol'] = 1.0e-10
        if version.parse(OPENMDAO_VERSION) > version.parse("2.8.0"):
            self.linear_solver.options['err_on_non_converge'] = True
        else:
            self.linear_solver.options['err_on_maxiter'] = True        
        self.linear_solver.options['iprint'] = 1

    def setup(self): 

        self.add_subsystem('FonctionVandenkerckhove', self.create_fonction_vandenkerckhove(), promotes=['gamma', 'gamma_maj'])
        self.add_subsystem('ExpansionRatio', self.create_expansion_ratio(), promotes=['epsilon', 'gamma', 'gamma_maj', 'Pc', 'Pe'])
        self.add_subsystem('ThroatArea', self.create_throat_area(), promotes=['Ae', 'At', 'epsilon'])
        self.add_subsystem('PropMassFlowRate', self.create_prop_mass_flow_rate(), promotes=['At', 'gamma_maj', 'Pc', 'prop_m', 'R', 'Tc'])
        self.add_subsystem('CharacteristicVelocity', self.create_characteristic_velocity(), promotes=['C_star', 'gamma_maj', 'R', 'Tc'])
        self.add_subsystem('ThrustCoefficient', self.create_thrust_coefficient(), promotes=['C_F', 'gamma', 'gamma_maj', 'Pc', 'Pe'])
        self.add_subsystem('ExhaustVelocity', self.create_exhaust_velocity(), promotes=['C_F', 'C_star', 'Ve'])
        self.add_subsystem('ThrustForce', self.create_thrust_force(), promotes=['Ae', 'F_T', 'Pa', 'Pe', 'prop_m', 'Ve', 'zeta'])
        self.add_subsystem('SpecificImpulse', self.create_specific_impulse(), promotes=['g0', 'Isp', 'Ve'])

    def create_fonction_vandenkerckhove(self):
    	return FonctionVandenkerckhove()
    def create_expansion_ratio(self):
    	return ExpansionRatio()
    def create_throat_area(self):
    	return ThroatArea()
    def create_prop_mass_flow_rate(self):
    	return PropMassFlowRate()
    def create_characteristic_velocity(self):
    	return CharacteristicVelocity()
    def create_thrust_coefficient(self):
    	return ThrustCoefficient()
    def create_exhaust_velocity(self):
    	return ExhaustVelocity()
    def create_thrust_force(self):
    	return ThrustForce()
    def create_specific_impulse(self):
    	return SpecificImpulse()


# Used by Thrift server to serve disciplines
class PropulsionFactoryBase(object):
    @staticmethod
    def create_propulsion_fonction_vandenkerckhove():
    	return FonctionVandenkerckhove()
    @staticmethod
    def create_propulsion_expansion_ratio():
    	return ExpansionRatio()
    @staticmethod
    def create_propulsion_throat_area():
    	return ThroatArea()
    @staticmethod
    def create_propulsion_prop_mass_flow_rate():
    	return PropMassFlowRate()
    @staticmethod
    def create_propulsion_characteristic_velocity():
    	return CharacteristicVelocity()
    @staticmethod
    def create_propulsion_thrust_coefficient():
    	return ThrustCoefficient()
    @staticmethod
    def create_propulsion_exhaust_velocity():
    	return ExhaustVelocity()
    @staticmethod
    def create_propulsion_thrust_force():
    	return ThrustForce()
    @staticmethod
    def create_propulsion_specific_impulse():
    	return SpecificImpulse()

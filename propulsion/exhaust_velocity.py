# -*- coding: utf-8 -*-
"""
  exhaust_velocity.py generated by WhatsOpt 1.7.1
"""
import numpy as np
from propulsion.exhaust_velocity_base import ExhaustVelocityBase

class ExhaustVelocity(ExhaustVelocityBase):
    """ An OpenMDAO component to encapsulate ExhaustVelocity discipline """
		
    def compute(self, inputs, outputs):
        """ ExhaustVelocity computation """
        if self._impl:
            # Docking mechanism: use implementation if referenced in .whatsopt_dock.yml file
            self._impl.compute(inputs, outputs)
        else:
            C_F = inputs['C_F']
            C_star = inputs['C_star']

            Ve = C_star * C_F

            outputs['Ve'] = Ve  
        return outputs  

# Reminder: inputs of compute()
#   
#       inputs['C_F'] -> shape: (1,), type: Float    
#       inputs['C_star'] -> shape: (1,), type: Float      
	
# To declare partial derivatives computation ...
# 
#    def setup(self):
#        super(ExhaustVelocity, self).setup()
#        self.declare_partials('*', '*')  
#			
#    def compute_partials(self, inputs, partials):
#        """ Jacobian for ExhaustVelocity """
#   
#       	partials['Ve', 'C_F'] = np.zeros((1, 1))
#       	partials['Ve', 'C_star'] = np.zeros((1, 1))        

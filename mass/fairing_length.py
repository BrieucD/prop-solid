# -*- coding: utf-8 -*-
"""
  fairing_length.py generated by WhatsOpt 1.6.1
"""
import numpy as np
from mass.fairing_length_base import FairingLengthBase

class FairingLength(FairingLengthBase):
    """ An OpenMDAO component to encapsulate FairingLength discipline """
		
    def compute(self, inputs, outputs):
        """ FairingLength computation """
        Ds = inputs['Ds']

        L_fairing = 1.1035 * (Ds **1.6385) + 2.3707

        outputs['L_fairing'] = L_fairing
        return outputs

# Reminder: inputs of compute()
#   
#       inputs['Ds'] -> shape: (1,), type: Float      
	
# To declare partial derivatives computation ...
# 
#    def setup(self):
#        super(FairingLength, self).setup()
#        self.declare_partials('*', '*')  
#			
#    def compute_partials(self, inputs, partials):
#        """ Jacobian for FairingLength """
#   
#       	partials['L_fairing', 'Ds'] = np.zeros((1, 1))        

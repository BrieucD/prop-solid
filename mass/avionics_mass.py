# -*- coding: utf-8 -*-
"""
  avionics_mass.py generated by WhatsOpt 1.6.1
"""
import numpy as np
from mass.avionics_mass_base import AvionicsMassBase

class AvionicsMass(AvionicsMassBase):
    """ An OpenMDAO component to encapsulate AvionicsMass discipline """
		
    def compute(self, inputs, outputs):
        """ AvionicsMass computation """
        Ds = inputs['Ds']
        L_vehicle = inputs['L_vehicle']

        M_avionics = 0.25 * (246.76+ 1.3183 * Ds * L_vehicle)

        outputs['M_avionics'] = M_avionics
        return outputs

# Reminder: inputs of compute()
#   
#       inputs['Ds'] -> shape: (1,), type: Float    
#       inputs['L_vehicle'] -> shape: (1,), type: Float      
	
# To declare partial derivatives computation ...
# 
#    def setup(self):
#        super(AvionicsMass, self).setup()
#        self.declare_partials('*', '*')  
#			
#    def compute_partials(self, inputs, partials):
#        """ Jacobian for AvionicsMass """
#   
#       	partials['M_avionics', 'Ds'] = np.zeros((1, 1))
#       	partials['M_avionics', 'L_vehicle'] = np.zeros((1, 1))        

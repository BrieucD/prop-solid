# -*- coding: utf-8 -*-
"""
  interstage_mass.py generated by WhatsOpt 1.6.1
"""
import numpy as np
from mass.interstage_mass_base import InterstageMassBase

class InterstageMass(InterstageMassBase):
    """ An OpenMDAO component to encapsulate InterstageMass discipline """
		
    def compute(self, inputs, outputs):
        """ InterstageMass computation """
    
        outputs['M_interstage'] = np.ones((1,))   

# Reminder: inputs of compute()
#   
#       inputs['Ds'] -> shape: (1,), type: Float    
#       inputs['k_sm'] -> shape: (1,), type: Float    
#       inputs['S_int'] -> shape: (1,), type: Float      
	
# To declare partial derivatives computation ...
# 
#    def setup(self):
#        super(InterstageMass, self).setup()
#        self.declare_partials('*', '*')  
#			
#    def compute_partials(self, inputs, partials):
#        """ Jacobian for InterstageMass """
#   
#       	partials['M_interstage', 'Ds'] = np.zeros((1, 1))
#       	partials['M_interstage', 'k_sm'] = np.zeros((1, 1))
#       	partials['M_interstage', 'S_int'] = np.zeros((1, 1))        

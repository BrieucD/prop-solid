# -*- coding: utf-8 -*-
"""
  power_subsystem_mass.py generated by WhatsOpt 1.6.1
"""
import numpy as np
from mass.power_subsystem_mass_base import PowerSubsystemMassBase

class PowerSubsystemMass(PowerSubsystemMassBase):
    """ An OpenMDAO component to encapsulate PowerSubsystemMass discipline """
		
    def compute(self, inputs, outputs):
        """ PowerSubsystemMass computation """
    
        outputs['M_EPS'] = np.ones((1,))   

# Reminder: inputs of compute()
#   
#       inputs['M_avionics'] -> shape: (1,), type: Float      
	
# To declare partial derivatives computation ...
# 
#    def setup(self):
#        super(PowerSubsystemMass, self).setup()
#        self.declare_partials('*', '*')  
#			
#    def compute_partials(self, inputs, partials):
#        """ Jacobian for PowerSubsystemMass """
#   
#       	partials['M_EPS', 'M_avionics'] = np.zeros((1, 1))        

# -*- coding: utf-8 -*-
"""
  solid_base.py generated by WhatsOpt 1.7.1
"""
# DO NOT EDIT unless you know what you are doing
# whatsopt_url: 
# analysis_id: 79


import numpy as np
from numpy import nan
from packaging import version

from openmdao.api import Problem, Group, ParallelGroup, IndepVarComp
from openmdao.api import NonlinearBlockGS
from openmdao.api import ScipyKrylov
from openmdao import __version__ as OPENMDAO_VERSION

from solid.propellants_mass import PropellantsMass
from solid.solid_rocket_mass import SolidRocketMass
from solid.solid_motor_length import SolidMotorLength
from solid.length_convergent_section import LengthConvergentSection
from solid.length_divergent_section import LengthDivergentSection
from solid.solid_rocket_length import SolidRocketLength








class SolidBase(Group):
    """ An OpenMDAO base component to encapsulate Solid MDA """
    def __init__(self, thrift_client=None, **kwargs):
        super(SolidBase, self). __init__(**kwargs)

        self.nonlinear_solver = NonlinearBlockGS()       
        self.nonlinear_solver.options['atol'] = 1.0e-10
        self.nonlinear_solver.options['rtol'] = 1.0e-10
        if version.parse(OPENMDAO_VERSION) > version.parse("2.8.0"):
            self.nonlinear_solver.options['err_on_non_converge'] = True
            if version.parse(OPENMDAO_VERSION) > version.parse("2.9.1"):
                self.nonlinear_solver.options['reraise_child_analysiserror'] = False 
        else:
            self.nonlinear_solver.options['err_on_maxiter'] = True
        self.nonlinear_solver.options['iprint'] = 1

        self.linear_solver = ScipyKrylov()       
        self.linear_solver.options['atol'] = 1.0e-10
        self.linear_solver.options['rtol'] = 1.0e-10
        if version.parse(OPENMDAO_VERSION) > version.parse("2.8.0"):
            self.linear_solver.options['err_on_non_converge'] = True
        else:
            self.linear_solver.options['err_on_maxiter'] = True        
        self.linear_solver.options['iprint'] = 1

    def setup(self): 

        self.add_subsystem('PropellantsMass', self.create_propellants_mass(), promotes=['Mp', 'prop_m', 'SF', 'tb'])
        self.add_subsystem('SolidRocketMass', self.create_solid_rocket_mass(), promotes=['Mp', 'M_case', 'M_igniter', 'M_nozzle', 'M_SRM'])
        self.add_subsystem('SolidMotorLength', self.create_solid_motor_length(), promotes=['Ds', 'FF', 'L_case', 'Mp', 'rho_p'])
        self.add_subsystem('LengthConvergentSection', self.create_length_convergent_section(), promotes=['beta', 'Ds', 'Dt', 'L_conv'])
        self.add_subsystem('LengthDivergentSection', self.create_length_divergent_section(), promotes=['De', 'Dt', 'L_div', 'Ru', 'theta_n'])
        self.add_subsystem('SolidRocketLength', self.create_solid_rocket_length(), promotes=['L_case', 'L_conv', 'L_div', 'L_SRM'])

    def create_propellants_mass(self):
    	return PropellantsMass()
    def create_solid_rocket_mass(self):
    	return SolidRocketMass()
    def create_solid_motor_length(self):
    	return SolidMotorLength()
    def create_length_convergent_section(self):
    	return LengthConvergentSection()
    def create_length_divergent_section(self):
    	return LengthDivergentSection()
    def create_solid_rocket_length(self):
    	return SolidRocketLength()


# Used by Thrift server to serve disciplines
class SolidFactoryBase(object):
    @staticmethod
    def create_solid_propellants_mass():
    	return PropellantsMass()
    @staticmethod
    def create_solid_solid_rocket_mass():
    	return SolidRocketMass()
    @staticmethod
    def create_solid_solid_motor_length():
    	return SolidMotorLength()
    @staticmethod
    def create_solid_length_convergent_section():
    	return LengthConvergentSection()
    @staticmethod
    def create_solid_length_divergent_section():
    	return LengthDivergentSection()
    @staticmethod
    def create_solid_solid_rocket_length():
    	return SolidRocketLength()

# -*- coding: utf-8 -*-
"""
  length_divergent_section.py generated by WhatsOpt 1.7.1
"""
import numpy as np
from solid.length_divergent_section_base import LengthDivergentSectionBase

class LengthDivergentSection(LengthDivergentSectionBase):
    """ An OpenMDAO component to encapsulate LengthDivergentSection discipline """
		
    def compute(self, inputs, outputs):
        """ LengthDivergentSection computation """
        if self._impl:
            # Docking mechanism: use implementation if referenced in .whatsopt_dock.yml file
            self._impl.compute(inputs, outputs)
        else:
            De = inputs['De']
            Dt = inputs['Dt']
            Ru = inputs['Ru']
            theta_n = inputs['theta_n']

            L_div = Ru * np.sin(theta_n) + ((De - Dt - 2 * (Ru - Ru * np.cos(theta_n))) / (2 * np.tan(theta_n)))
        
            outputs['L_div'] = L_div
        return outputs  

# Reminder: inputs of compute()
#   
#       inputs['De'] -> shape: (1,), type: Float    
#       inputs['Dt'] -> shape: (1,), type: Float    
#       inputs['Ru'] -> shape: (1,), type: Float    
#       inputs['theta_n'] -> shape: (1,), type: Float      
	
# To declare partial derivatives computation ...
# 
#    def setup(self):
#        super(LengthDivergentSection, self).setup()
#        self.declare_partials('*', '*')  
#			
#    def compute_partials(self, inputs, partials):
#        """ Jacobian for LengthDivergentSection """
#   
#       	partials['L_div', 'De'] = np.zeros((1, 1))
#       	partials['L_div', 'Dt'] = np.zeros((1, 1))
#       	partials['L_div', 'Ru'] = np.zeros((1, 1))
#       	partials['L_div', 'theta_n'] = np.zeros((1, 1))        

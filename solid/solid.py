# -*- coding: utf-8 -*-
"""
  solid.py generated by WhatsOpt 1.6.1
"""
from optparse import OptionParser
from openmdao.api import Problem
from openmdao.api import NonlinearBlockGS, ScipyKrylov
from openmdao.api import view_model
# from openmdao_extensions.reckless_nonlinear_block_gs import RecklessNonlinearBlockGS
from solid.solid_base import SolidBase, SolidFactoryBase

class Solid(SolidBase):
    """ An OpenMDAO component to encapsulate Solid analysis """
    def __init__(self, **kwargs):
        super(Solid, self).__init__(**kwargs)

        # Example of manual solver adjusments (imports should be adjusted accordingly)
        # self.nonlinear_solver = NewtonSolver() 
        # self.nonlinear_solver.options['maxiter'] = 20
        # self.linear_solver = DirectSolver()

    def setup(self):
        super(Solid, self).setup()


class SolidFactory(SolidFactoryBase):
    """ A factory to create disciplines of Solid analysis """
    pass

if __name__ == "__main__":
    parser = OptionParser()
    parser.add_option("-n", "--no-n2", action="store_false", dest='n2_view', default=True, 
                      help="display N2 openmdao viewer")
    (options, args) = parser.parse_args()

    problem = Problem()
    problem.model = Solid()

    problem.setup()
    problem.final_setup()
    
    if options.n2_view:
        view_model(problem)
    
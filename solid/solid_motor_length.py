# -*- coding: utf-8 -*-
"""
  solid_motor_length.py generated by WhatsOpt 1.7.1
"""
import numpy as np
from solid.solid_motor_length_base import SolidMotorLengthBase

class SolidMotorLength(SolidMotorLengthBase):
    """ An OpenMDAO component to encapsulate SolidMotorLength discipline """
		
    def compute(self, inputs, outputs):
        """ SolidMotorLength computation """
        if self._impl:
            # Docking mechanism: use implementation if referenced in .whatsopt_dock.yml file
            self._impl.compute(inputs, outputs)
        else:
            Ds = inputs['Ds']
            FF = inputs['FF']
            Mp = inputs['Mp']
            rho_p = inputs['rho_p']

            L_case = Mp / (rho_p * np.pi * (((0.99* Ds) / 2 )**2) * FF)

            outputs['L_case'] = L_case
        return outputs  
                    

# Reminder: inputs of compute()
#   
#       inputs['Ds'] -> shape: (1,), type: Float    
#       inputs['FF'] -> shape: (1,), type: Float    
#       inputs['Mp'] -> shape: (1,), type: Float    
#       inputs['rho_p'] -> shape: (1,), type: Float      
	
# To declare partial derivatives computation ...
# 
#    def setup(self):
#        super(SolidMotorLength, self).setup()
#        self.declare_partials('*', '*')  
#			
#    def compute_partials(self, inputs, partials):
#        """ Jacobian for SolidMotorLength """
#   
#       	partials['L_case', 'Ds'] = np.zeros((1, 1))
#       	partials['L_case', 'FF'] = np.zeros((1, 1))
#       	partials['L_case', 'Mp'] = np.zeros((1, 1))
#       	partials['L_case', 'rho_p'] = np.zeros((1, 1))        

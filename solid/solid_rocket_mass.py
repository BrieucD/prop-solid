# -*- coding: utf-8 -*-
"""
  solid_rocket_mass.py generated by WhatsOpt 1.7.1
"""
import numpy as np
from solid.solid_rocket_mass_base import SolidRocketMassBase

class SolidRocketMass(SolidRocketMassBase):
    """ An OpenMDAO component to encapsulate SolidRocketMass discipline """
		
    def compute(self, inputs, outputs):
        """ SolidRocketMass computation """
        if self._impl:
            # Docking mechanism: use implementation if referenced in .whatsopt_dock.yml file
            self._impl.compute(inputs, outputs)
        else:
            Mp = inputs['Mp']
            M_case = inputs['M_case']
            M_igniter = inputs['M_igniter']
            M_nozzle = inputs['M_nozzle']

            M_SRM = Mp + M_nozzle + M_case + M_igniter

            outputs['M_SRM'] = M_SRM
        return outputs
                    
  

# Reminder: inputs of compute()
#   
#       inputs['Mp'] -> shape: (1,), type: Float    
#       inputs['M_case'] -> shape: (1,), type: Float    
#       inputs['M_igniter'] -> shape: (1,), type: Float    
#       inputs['M_nozzle'] -> shape: (1,), type: Float      
	
# To declare partial derivatives computation ...
# 
#    def setup(self):
#        super(SolidRocketMass, self).setup()
#        self.declare_partials('*', '*')  
#			
#    def compute_partials(self, inputs, partials):
#        """ Jacobian for SolidRocketMass """
#   
#       	partials['M_SRM', 'Mp'] = np.zeros((1, 1))
#       	partials['M_SRM', 'M_case'] = np.zeros((1, 1))
#       	partials['M_SRM', 'M_igniter'] = np.zeros((1, 1))
#       	partials['M_SRM', 'M_nozzle'] = np.zeros((1, 1))        
